package net.java.sip.communicator.plugin.certconfig;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import net.java.sip.communicator.service.certificate.CipherSuiteHelper;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import net.java.sip.communicator.plugin.desktoputil.TransparentPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author markus
 */
public class CipherSuitesPanel extends TransparentPanel {

    private final List<String> defaultList;
    private final List<String> allSupportedList;
    
    private final MyListModel<String> supportedListModel;
    private final MyListModel<String> blackListModel;
    private final MyListModel<String> whiteListModel;
    private final MyListModel<String> enabledListModel;
    private List<String> orderingList;
    
    private final List<ActionListener> listeners = new LinkedList<ActionListener>();

    /**
     * Creates new form CipherSuitesPanel
     * @param supportedList
     */
    public CipherSuitesPanel(
            List<String> defaultList,
            List<String> supportedList, 
            List<String> blackList, 
            List<String> whiteList, 
            List<String> enabledList,
            List<String> orderingList) {
        this.defaultList = defaultList;
        this.allSupportedList = supportedList;
        this.supportedListModel = new MyListModel<String>(supportedList);
        this.blackListModel = new MyListModel<String>(blackList);
        this.whiteListModel = new MyListModel<String>(whiteList);
        this.enabledListModel = new MyListModel<String>(enabledList);
        this.orderingList = orderingList;
        
        initComponents();
        
        jListSupported.setModel(supportedListModel);
        jListBlack.setModel(blackListModel);
        jListWhite.setModel(whiteListModel);
        jListEnabled.setModel(enabledListModel);
        
        ListDataListener listDataListener = new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
                listsChanged();
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                listsChanged();
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                listsChanged();
            }
        };
        
//        supportedListModel.addListDataListener(listDataListener);
//        blackListModel.addListDataListener(listDataListener);
//        whiteListModel.addListDataListener(listDataListener);
//        enabledListModel.addListDataListener(listDataListener);
        
        // Remove initially black- and whitelisted
        supportedList.removeAll(blackList);
        supportedList.removeAll(whiteList);
        listsChanged();
        orderingChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListSupported = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListEnabled = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jButtonOrderingUp = new javax.swing.JButton();
        jButtonOrderingDown = new javax.swing.JButton();
        jButtonOrderingReset = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonAddToWhitelist = new javax.swing.JButton();
        jButtonRemoveFromWhitelist = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListWhite = new javax.swing.JList();
        jButtonAddToBlacklist = new javax.swing.JButton();
        jButtonRemoveFromBlacklist = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListBlack = new javax.swing.JList();

        jListSupported.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListSupported.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListSupportedValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListSupported);

        jLabel1.setText("Available:");

        jListEnabled.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListEnabled.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListEnabledValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jListEnabled);

        jLabel4.setText("Enabled (in priority order):");

        jButtonOrderingUp.setText("Move up");
        jButtonOrderingUp.setEnabled(false);
        jButtonOrderingUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderingUpActionPerformed(evt);
            }
        });

        jButtonOrderingDown.setText("Move down");
        jButtonOrderingDown.setEnabled(false);
        jButtonOrderingDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderingDownActionPerformed(evt);
            }
        });

        jButtonOrderingReset.setText("Reset ordering");
        jButtonOrderingReset.setEnabled(false);
        jButtonOrderingReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderingResetActionPerformed(evt);
            }
        });

        jButtonAddToWhitelist.setText("Add >");
        jButtonAddToWhitelist.setEnabled(false);
        jButtonAddToWhitelist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToWhitelistActionPerformed(evt);
            }
        });

        jButtonRemoveFromWhitelist.setText("< Remove");
        jButtonRemoveFromWhitelist.setEnabled(false);
        jButtonRemoveFromWhitelist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFromWhitelistActionPerformed(evt);
            }
        });

        jLabel3.setText("Whitelisted:");

        jListWhite.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListWhite.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListWhiteValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListWhite);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButtonAddToWhitelist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveFromWhitelist, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 332, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddToWhitelist, jButtonRemoveFromWhitelist});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddToWhitelist)
                    .addComponent(jButtonRemoveFromWhitelist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jButtonAddToBlacklist.setText("Blacklist");
        jButtonAddToBlacklist.setEnabled(false);
        jButtonAddToBlacklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToBlacklistActionPerformed(evt);
            }
        });

        jButtonRemoveFromBlacklist.setText("Remove");
        jButtonRemoveFromBlacklist.setEnabled(false);
        jButtonRemoveFromBlacklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFromBlacklistActionPerformed(evt);
            }
        });

        jLabel2.setText("Blacklisted:");

        jListBlack.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListBlack.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListBlackValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListBlack);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonOrderingDown)
                            .addComponent(jButtonOrderingReset)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonOrderingUp)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddToBlacklist)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonRemoveFromBlacklist, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddToBlacklist, jButtonRemoveFromBlacklist});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonOrderingDown, jButtonOrderingReset, jButtonOrderingUp});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAddToBlacklist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemoveFromBlacklist)
                .addGap(49, 49, 49)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOrderingUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOrderingDown)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOrderingReset)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListSupportedValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListSupportedValueChanged
        if (!evt.getValueIsAdjusting()) {
            boolean enabled = !jListSupported.getSelectionModel().isSelectionEmpty();
            jButtonAddToBlacklist.setEnabled(enabled);
            jButtonAddToWhitelist.setEnabled(enabled);
        }
    }//GEN-LAST:event_jListSupportedValueChanged

    private void jListBlackValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListBlackValueChanged
        if (!evt.getValueIsAdjusting()) {
            jButtonRemoveFromBlacklist.setEnabled(!jListBlack.getSelectionModel().isSelectionEmpty());
        }
    }//GEN-LAST:event_jListBlackValueChanged

    private void jListWhiteValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListWhiteValueChanged
        if (!evt.getValueIsAdjusting()) {
            jButtonRemoveFromWhitelist.setEnabled(!jListWhite.getSelectionModel().isSelectionEmpty());
        }
    }//GEN-LAST:event_jListWhiteValueChanged

    private void jButtonAddToBlacklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToBlacklistActionPerformed
        blackListModel.addAll(jListSupported.getSelectedValuesList());
        supportedListModel.removeAll(jListSupported.getSelectedValuesList());
        listsChanged();
    }//GEN-LAST:event_jButtonAddToBlacklistActionPerformed

    private void jButtonAddToWhitelistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToWhitelistActionPerformed
        whiteListModel.addAll(jListSupported.getSelectedValuesList());
        supportedListModel.removeAll(jListSupported.getSelectedValuesList());
        listsChanged();
    }//GEN-LAST:event_jButtonAddToWhitelistActionPerformed

    private void jButtonRemoveFromBlacklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFromBlacklistActionPerformed
        supportedListModel.addAll(jListBlack.getSelectedValuesList());
        blackListModel.removeAll(jListBlack.getSelectedValuesList());
        listsChanged();
    }//GEN-LAST:event_jButtonRemoveFromBlacklistActionPerformed

    private void jButtonRemoveFromWhitelistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFromWhitelistActionPerformed
        supportedListModel.addAll(jListWhite.getSelectedValuesList());
        whiteListModel.removeAll(jListWhite.getSelectedValuesList());
        listsChanged();
    }//GEN-LAST:event_jButtonRemoveFromWhitelistActionPerformed

    private void jListEnabledValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListEnabledValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (jListEnabled.getSelectionModel().isSelectionEmpty()) {
                jButtonOrderingUp.setEnabled(false);
                jButtonOrderingDown.setEnabled(false);
            } else {
                boolean top = jListEnabled.getSelectionModel().getMinSelectionIndex() < 1;
                boolean bottom = jListEnabled.getSelectionModel().getMaxSelectionIndex() >= enabledListModel.getSize() - 1;

                jButtonOrderingUp.setEnabled(!top);
                jButtonOrderingDown.setEnabled(!bottom);
            }
        }
    }//GEN-LAST:event_jListEnabledValueChanged

    private void jButtonOrderingUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderingUpActionPerformed
        int[] selection = jListEnabled.getSelectedIndices();
        enabledListModel.moveUp(selection);
        for (int i = 0; i < selection.length; i++) {
            selection[i] = selection[i] - 1;
        }
        jListEnabled.setSelectedIndices(selection);
        orderingList = enabledListModel.list;
        orderingChanged();
        fireConfigurationChanged();
    }//GEN-LAST:event_jButtonOrderingUpActionPerformed

    private void jButtonOrderingDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderingDownActionPerformed
        int[] selection = jListEnabled.getSelectedIndices();
        enabledListModel.moveDown(selection);
        for (int i = 0; i < selection.length; i++) {
            selection[i] = selection[i] + 1;
        }
        jListEnabled.setSelectedIndices(selection);
        orderingList = enabledListModel.list;
        orderingChanged();
        fireConfigurationChanged();
    }//GEN-LAST:event_jButtonOrderingDownActionPerformed

    private void jButtonOrderingResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderingResetActionPerformed
        orderingList = null;
        listsChanged();
        orderingChanged();
    }//GEN-LAST:event_jButtonOrderingResetActionPerformed

    private void listsChanged() {
        List<String> enabledList = CipherSuiteHelper.computeFinalList(defaultList, new HashSet<String>(allSupportedList), new HashSet<String>(blackListModel.list), new HashSet<String>(whiteListModel.list), orderingList, true);        
        enabledListModel.set(enabledList);
        fireConfigurationChanged();
    }
    
    private void orderingChanged() {
        jButtonOrderingReset.setEnabled(orderingList != null && !orderingList.isEmpty());
    }

    public void addConfigurationChangedListener(ActionListener listener) {
        listeners.add(listener);
    }
    
    private void fireConfigurationChanged() {
        for (ActionListener listener : listeners) {
            listener.actionPerformed(new ActionEvent(this, 0, null));
        }
    }
    
    private static class MyListModel<T> extends AbstractListModel<T> {

        private final List<T> list;

        public MyListModel(List<T> list) {
            if (list == null) {
                this.list = new ArrayList<T>();
            } else {
                this.list = new ArrayList<T>(list);
            }
        }
        
        @Override
        public int getSize() {
            return list.size();
        }

        @Override
        public T getElementAt(int index) {
            return list.get(index);
        }
        
        public void addAll(List<T> values) {
            if (!values.isEmpty()) {
                int oldSize = list.size();
                list.addAll(values);
                fireIntervalAdded(this, 
                        oldSize > 0 ? oldSize - 1 : 0, 
                        list.size() - 1);
            }
        }

        public List<T> getList() {
            return Collections.unmodifiableList(list);
        }

        private void removeAll(List<T> values) {
//            int oldLastIndex = list.size() > 0 ? list.size() - 1 : 0;
//            list.removeAll(values);
//            fireContentsChanged(this, 0, oldLastIndex);
            
            for (T value : values) {
                int i = list.indexOf(value);
                if (i >= 0) {
                    list.remove(i);
                    fireIntervalRemoved(this, i, i);
                }
            }
            
        }

        private void set(List<T> values) {
            int oldLastIndex = list.size() > 0 ? list.size() - 1 : 0;
            list.clear();
            int newLastIndex = list.size() > 0 ? list.size() - 1 : 0;
            list.addAll(values);
            fireContentsChanged(this, 0, newLastIndex > oldLastIndex ? newLastIndex : oldLastIndex);
        }

        private void moveUp(int[] sortedIndices) {
            for (int index : sortedIndices) {
                if (index <= 0) {
                    throw new IllegalArgumentException("Value already at first position");
                }
                T value = list.remove(index);
                list.add(index - 1, value);
            }
            fireContentsChanged(this, sortedIndices[0] - 1, sortedIndices[sortedIndices.length - 1]);
        }

        private void moveDown(int[] sortedIndices) {
            for (int i = sortedIndices.length - 1; i >= 0; i--) {
                int index = sortedIndices[i];
                if (index >= list.size() - 1) {
                    throw new IllegalArgumentException("Value already at last position");
                }
                T value = list.remove(index);
                list.add(index + 1, value);
            }
            fireContentsChanged(this, sortedIndices[0] - 1, sortedIndices[sortedIndices.length - 1]);
        }

    }
    
    public List<String> getBlackList() {
        return blackListModel.getList();
    }
    
    public List<String> getWhiteList() {
        return whiteListModel.getList();
    }
    
    public List<String> getOrderingList() {
        return orderingList;
    }
    
    public List<String> getEnabledList() {
        return enabledListModel.getList();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddToBlacklist;
    private javax.swing.JButton jButtonAddToWhitelist;
    private javax.swing.JButton jButtonOrderingDown;
    private javax.swing.JButton jButtonOrderingReset;
    private javax.swing.JButton jButtonOrderingUp;
    private javax.swing.JButton jButtonRemoveFromBlacklist;
    private javax.swing.JButton jButtonRemoveFromWhitelist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jListBlack;
    private javax.swing.JList jListEnabled;
    private javax.swing.JList jListSupported;
    private javax.swing.JList jListWhite;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
